# This is an example configuration file for forming the final
# DeltaSigma profiles.

# The pre-compute results for lens
ds_lenses: "lens_ds.npz"
# The pre-compute results for random
#   Can be left blank for no use of randoms in computation
ds_randoms: "random_ds.npz"
# The mask_args to be evaluated on the lens_catalog, and applied to ds_lenses
mask_args: "logm_10/>/11:logm_10/</12"
# External mask array: in case the selection is too complex to be done using simple arguments
external_mask: ''
# Name of the output file
output_prefix: "massive_test"
# The lens catalog: should be exactly the same one for pre-compute
# Notice: During the pre-compute step, we organize the lens catalog based on their
#         field information, and it generates a new lens catalog with `_new` suffix.
#         Please use the `_new.npy` one to make sure the lens weight and lens selection
#         is correct.
lens_catalog: "lens_massive_new.npy"
rand_catalog: "rand_massive_new.npy"

# Name of the lens weight column.
lens_weight: weight
# Name for a different lens weight column.
# Notice: When `lens_weight_2` is available, computeDS will Jackknife the ratio between the
#         DeltaSigma profiles using two different weights.
#         The output format is the same with the one using second pre-compute results.
lens_weight_2: None
# Number of redshift bins used to re-weight the redshift distribtuion of randoms
rand_zweight_nbins: 10
# Use the same weight column name for randoms
same_weight_random: True

# Number of the jackknife fields
njackknife_fields: 40
# Whether to include the correction for m_selection bias
# This should be True for HSC by default.
# The effect of this bias is very small, typicall < 1%
selection_bias: True
# Whether to include the correction for boost factor
#   We always compute the boost factor when random catalog is available.
#   This flag determines whether we apply it to the final signal.
boost_factor: False

# Notice: If second set of inputs are provided, we will compare the ratio of its
#          DeltaSigma profile to the first one.
# Additional pre-compute result; for testing the differences between two profiles
ds_lenses_2: "lens_ds_2.npz"
# Additional pre-compute result on randoms
ds_randoms_2: "rand_ds_2.npz"
# Lens and random catalogs for the second set of pre-computed results.
# When no available, will just use lens_catalog and rand_catalog.
lens_catalog_2: "lens_massive_new.npy"
rand_catalog_2: "rand_massive_new.npy"
# Masks for the second profile
mask_args_2: "logm_10/>/11:logm_10/</12"

# Number of processors to run on, for the Jackknife error
n_jobs: 1

# For estimating the correlation and covariance matrix
covariance:
    boxsize: 1
    trunc: 0.2
    n_boots: 5000
# About measuring the average ratio between two DeltaSigma profiles
#   By default, the procedure will try to fit an average offset between
#   r1 and r2, r1 and r3, and also r2 and r3.
ratios:
    diff: False
    # By default, the code will fit the ratio between the two profiles, but
    # it can also fit the average difference.
    r1: 0.1
    r2: 1.0
    r3: 10.0
